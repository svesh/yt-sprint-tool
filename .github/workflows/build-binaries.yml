name: Build Binaries

on:
  push:
    branches: ['**']
    tags: ['v*']
  workflow_dispatch:

permissions:
  contents: write

jobs:
  quality:
    name: Quality Checks
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyright isort pymarkdownlnt yamllint

      - name: pylint
        run: |
          pylint **/*.py

      - name: pyright
        run: |
          pyright

      - name: isort check
        run: |
          python -m isort --check --diff .

      - name: markdown lint
        run: |
          pymarkdownlnt --config .pymarkdownlnt.json scan --recurse --exclude=./.venv .

      - name: yamllint
        run: |
          yamllint -c .yamllint.yaml .

      - name: pytest with coverage
        run: |
          pytest -v --cov=ytsprint --cov-fail-under=80

      - name: helm lint (conditional)
        shell: bash
        run: |
          if command -v helm >/dev/null 2>&1 && [ -d helm ]; then
            helm lint helm/
          else
            echo "helm or helm/ not present, skipping helm lint"
          fi

  linux:
    name: Linux (${{ matrix.arch }})
    needs: quality
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-24.04
            arch: amd64
          - runner: ubuntu-24.04-arm
            arch: arm64
    steps:
      - uses: actions/checkout@v4
      - name: Install Linux build deps
        shell: bash
        run: |
          bash scripts/linux-install-deps.sh
      - name: Build linux ${{ matrix.arch }}
        shell: bash
        run: |
          bash scripts/linux-build.sh
      - uses: actions/upload-artifact@v4
        with:
          name: binaries-linux-${{ matrix.arch }}
          path: dist/ytsprint-linux-${{ matrix.arch }}

  windows:
    name: Windows (${{ matrix.arch }})
    runs-on: ubuntu-24.04
    needs: quality
    strategy:
      matrix:
        include:
          - arch: amd64
            wine_arch: amd64
            artifact: ytsprint-windows-amd64.exe
            artifact_name: binaries-windows-amd64
          - arch: x86
            wine_arch: x86
            artifact: ytsprint-windows-x86.exe
            artifact_name: binaries-windows-x86
    env:
      WINE_TARGET_ARCH: ${{ matrix.wine_arch }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Wine build deps
        shell: bash
        run: |
          bash scripts/wine-install-deps.sh
      - name: Build windows ${{ matrix.arch }} via Wine
        shell: bash
        run: |
          bash scripts/wine-build.sh
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact }}

  macos:
    name: macOS (${{ matrix.arch }})
    needs: quality
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: macos-14
            arch: arm64
          - runner: macos-13
            arch: x86_64
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Create venv and install deps
        shell: bash
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          scripts/macos-build.sh
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-macos-${{ matrix.arch }}
          path: dist/ytsprint-macos-${{ matrix.arch }}

  docker-build:
    name: Docker Build (${{ matrix.arch }})
    needs: quality
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
          - arch: arm64
            platform: linux/arm64
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Prepare cache settings
        id: cache
        shell: bash
        run: |
          {
            echo "cache_from=type=gha"
            echo "cache_from_extra=type=registry,ref=ghcr.io/${{ github.repository_owner }}/yt-sprint-tool:buildcache"
            echo "cache_to=type=gha,mode=max"
            echo "cache_to_extra=type=registry,ref=ghcr.io/${{ github.repository_owner }}/yt-sprint-tool:buildcache,mode=max"
          } >>"$GITHUB_OUTPUT"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/yt-sprint-tool
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          flavor: |
            suffix=-${{ matrix.arch }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Login to GHCR with GITHUB_TOKEN
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push (${{ matrix.platform }})
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            ${{ steps.cache.outputs.cache_from }}
            ${{ steps.cache.outputs.cache_from_extra }}
          cache-to: |
            ${{ steps.cache.outputs.cache_to }}
            ${{ steps.cache.outputs.cache_to_extra }}

  docker-manifest:
    name: Docker Manifest
    needs: docker-build
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR with GITHUB_TOKEN
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/yt-sprint-tool
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Create multi-arch manifest
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r tag; do
            [[ -z "$tag" ]] && continue
            docker buildx imagetools create \
              --tag "$tag" \
              "${tag}-amd64" \
              "${tag}-arm64"
          done <<< "${{ steps.meta.outputs.tags }}"

      - name: Inspect manifest
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r tag; do
            [[ -z "$tag" ]] && continue
            docker buildx imagetools inspect "$tag"
          done <<< "${{ steps.meta.outputs.tags }}"

  release:
    name: Release (attach artifacts)
    runs-on: ubuntu-24.04
    needs: [linux, windows, macos, docker-manifest]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true

      - name: List artifacts
        run: |
          ls -la release

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release/ytsprint-linux-amd64
            release/ytsprint-linux-arm64
            release/ytsprint-windows-amd64.exe
            release/ytsprint-windows-x86.exe
            release/ytsprint-macos-arm64
            release/ytsprint-macos-x86_64
          draft: false
          prerelease: false
