# Multi-stage build based on Debian
# YT Sprint Tool - YouTrack Sprint automation utilities
# Author: Sergei Sveshnikov (svesh87@gmail.com) 
# Repository: https://github.com/svesh/yt-sprint-tool/
FROM python:3.12-slim AS builder

ARG USE_STATICX=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    patchelf \
    && rm -rf /var/lib/apt/lists/*

# Create working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --upgrade pip wheel setuptools \
    && pip install -r requirements.txt \
    && if [ "$USE_STATICX" = "1" ]; then pip install "scons>=4.7"; fi \
    && if [ "$USE_STATICX" = "1" ]; then pip install --no-build-isolation staticx==0.14.1; fi

# Copy source code
COPY ytsprint ./ytsprint

# Build Linux binaries
RUN pyinstaller --onefile --name make-sprint ytsprint/make_sprint.py \
    && pyinstaller --onefile --name default-sprint ytsprint/default_sprint.py

# Create statically linked binaries through staticx (optional)
RUN if [ "$USE_STATICX" = "1" ]; then \
      staticx dist/make-sprint dist/make-sprint-static && \
      staticx dist/default-sprint dist/default-sprint-static && \
      mv dist/make-sprint-static dist/make-sprint && \
      mv dist/default-sprint-static dist/default-sprint ; \
    else \
      echo "Skipping staticx step" ; \
    fi

# Final stage: clean Debian slim with binaries
FROM debian:12-slim AS runtime

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    libc6 \
    libgcc-s1 \
    libstdc++6 \
    && rm -rf /var/lib/apt/lists/*

# Create user
RUN useradd -m -u 1000 appuser

# Copy only Linux binaries from builder stage
COPY --from=builder /app/dist/make-sprint /usr/local/bin/
COPY --from=builder /app/dist/default-sprint /usr/local/bin/

# Set permissions
RUN chmod +x /usr/local/bin/make-sprint /usr/local/bin/default-sprint

# Switch to user
USER appuser

# Working directory
WORKDIR /home/appuser

# Entry point (by default show help)
CMD ["make-sprint", "--help"]

# export-stage: convenient export of binaries into artifact root
FROM scratch AS export-stage
COPY --from=runtime /usr/local/bin/make-sprint /make-sprint
COPY --from=runtime /usr/local/bin/default-sprint /default-sprint
